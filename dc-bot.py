# Produced by BuÄŸra Akdemir
# Anyone can use this automation by making some changes, or you can add it directly to your server and use it without making any changes.
# - Link Required to Add This Automation to Your Server ðŸ‘‡
# https://discord.com/api/oauth2/authorize?client_id=1207017285181513789&permissions=8&scope=bot
# Autoamsyon's Support Server ðŸ‘‡
# https://discord.gg/m9SwQvQ8xh

# GitHub And Ä°nstagram

# Zylles     S1r.bugra

# KÃ¼tÃ¼phaneler BaÅŸlangÄ±Ã§

import os
import discord
from discord.ext import commands
import src.info as info
import src.kurcm as kurcm
import src.kur as kur
import src.zBot_Token as zBot_Token
import time
import traceback
import src.utils as utils
import src.game as game
from src.game import *
from discord.ext import tasks
from datetime import *
import src.duyurular as duyurular
import random
import requests
import sqlite3
import random
import asyncio
import os
import openai
from bs4 import BeautifulSoup

# KÃ¼tÃ¼phaneler BitiÅŸ

intents = discord.Intents.all()


class MyBot(commands.Bot):
    def __init__(self, *args, **kwargs):
        super().__init__(command_prefix='!', intents=intents, *args, **kwargs)


bot = MyBot()
game = Game()
bot.remove_command('help')
version = "v4.9.5"
my_token = zBot_Token.Token1
openai.api_key = "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"
LOG_FILE2 = os.path.join('log', 'aÃ§iliÅŸ_logu.txt')
log_klasÃ¶rÃ¼ = 'log/'

# AÃ§Ä±lÄ±ÅŸ BaÅŸ

@bot.event
async def on_ready():
    print(f"{version}")
    print(f"{bot.user} BOT AKTÄ°F!!")
    await bot.change_presence(activity=discord.Game(name="!yardim"))
    await bot.tree.sync()
    embed = discord.Embed(title="BOT AKTÄ°F ðŸŸ©", url="", description=f"BOT SÃœRÃœMÃœ: {version}", color=0x00ff11)
    channetwo = bot.get_channel(1210577527957889034)
    await channetwo.send(embed=embed)
    bot_name = bot.user.name
    # Tarih ve saat bilgisini al
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    # Log mesajÄ±nÄ± oluÅŸtur
    log_message = f"{bot_name} {now} tarihinde aktif edildi\n"
    with open(LOG_FILE2, 'a', encoding="utf-8") as file:
        file.write(log_message)


# AÃ§Ä±lÄ±ÅŸ Bit

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        embed2 = discord.Embed(title="HATALI KOMUT", url="", description=f"{info.hata_m}", color=0xff0000)
        await ctx.send(embed=embed2)


@bot.command(name="yapÄ±mcÄ±")
async def yapÄ±mcÄ±(ctx):
    embed = discord.Embed(title="BuÄŸra Akdemir", url="https://hey.link/lAyMz", description=f"", color=0xffff00)
    await ctx.send(embed=embed)


@bot.command(name="producer")
async def producer(ctx):
    embed = discord.Embed(title="BuÄŸra Akdemir", url="https://hey.link/lAyMz", description=f"", color=0xffff00)
    await ctx.send(embed=embed)


# BÄ°LGÄ° kumutlarÄ± baÅŸlangÄ±Ã§
@bot.tree.command(name="yardim", description="Komutllari GÃ¶sterir")
async def slash_command(interaction: discord.Interaction):
    embed = discord.Embed(title="KOMUTLAR", url="", description=f"{info.bilgi}", color=0x2800ba)
    await interaction.response.send_message(embed=embed)


@bot.tree.command(name="admink", description="Admin Komutllari GÃ¶sterir")
async def slash_command2(interaction: discord.Interaction):
    embed = discord.Embed(title="ADMÄ°N KOMUTLARI", url="", description=f"{info.admink}", color=0xcfde02)
    await interaction.response.send_message(embed=embed)


#         "/" komutlarÄ± bitiÅŸ
@bot.command(name="admin")
async def admin(ctx):
    embed = discord.Embed(title="ADMÄ°N KOMUTLARI", url="", description=f"{info.admink}", color=0x090785)
    await ctx.send(embed=embed)


@bot.command(name="yardim")
async def yardim(ctx):
    embed = discord.Embed(title="YARDIM - HELP", url="", description=f"{info.bilgi}", color=0x090785)
    await ctx.send(embed=embed)

@bot.command(name="resim_bilgi")
async def resim_bilgi(ctx):
    embed = discord.Embed(title="Resim KomutlarÄ±", url="", description=f"{info.resim_b}", color=0x090785)
    await ctx.send(embed=embed)

@bot.command(name="vidio_bilgi")
async def vidio_bilgi(ctx):
    embed = discord.Embed(title="Vidio KomutlarÄ±", url="", description=f"{info.vidio_b}", color=0x090785)
    await ctx.send(embed=embed)

#@bot.command()
async def help(ctx):
    embed = discord.Embed(
        title="YardÄ±m",
        description="YardÄ±m komutlarÄ±",
        color=discord.Color.blue()
    )
    embed.add_field(name="!normal", value=f"Herkesin KullanabileceÄŸi\nKomutlarÄ± GÃ¶sterir", inline=False)
    embed.add_field(name="!admin", value="ADMÄ°NLERÄ°N KULLANABÄ°LECEÄžÄ° KOMUTLARI GÃ–STERÄ°R", inline=False)
    embed.add_field(name="!oyunlar", value="Oyun KomutlarÄ±nÄ± GÃ¶sterir", inline=False)
    # Daha fazla komut ekleyebilirsiniz

    await ctx.send(embed=embed)


# OYUNLAR - GAME BAÅžLANGIÃ‡
@bot.command(name="oyunlar")
async def oyunlar(ctx):
    embed = discord.Embed(title="OYUNLAR", url="", description=f"{info.oyunlar}", color=0x090785)
    await ctx.send(embed=embed)


@bot.command(name="games")
async def game(ctx):
    embed = discord.Embed(title="GAME", url="", description=f"{info.oyunlar}", color=0x090785)
    await ctx.send(embed=embed)


# OYUNLAR - GAME BÄ°TÄ°Åž
# VERSÄ°ON

@bot.command(name="version")
async def admin(ctx):
    embed = discord.Embed(title=f"{version}", url="", description=f"", color=0x090785)
    await ctx.send(embed=embed)


# NORMAL KOMUTLAR BAÅžLANGIÃ‡-
@bot.command(name="normal")
async def normal(ctx):
    embed = discord.Embed(title="NORMAL KOMUTLAR", url="", description=f"{info.normalb}", color=0x090785)
    await ctx.send(embed=embed)


@bot.command(name="basic")
async def basic(ctx):
    embed = discord.Embed(title="BASÄ°C", url="", description=f"{info.normalb}", color=0x090785)
    await ctx.send(embed=embed)


@bot.command(name="tkmk")
async def basic(ctx):
    embed = discord.Embed(title="TAÅž KAÄžIT MAKAS", url="", description=f"{info.tkmk}", color=0x090785)
    await ctx.send(embed=embed)


# -NORMAL KOMUTLAR BÄ°TÄ°Åž-

# DAVET BAÅžLANGIÃ‡
@bot.command(name="davet")
async def davet(ctx):
    embed = discord.Embed(title="DAVET LÄ°NKÄ°",
                          url="https://discord.com/api/oauth2/authorize?client_id=1207017285181513789&permissions=8&scope=bot",
                          description=f"", color=0x090785)
    await ctx.send(embed=embed)


@bot.command(name="invitation")
async def invitation(ctx):
    embed = discord.Embed(title="DAVET LÄ°NKÄ°",
                          url="https://discord.com/api/oauth2/authorize?client_id=1207017285181513789&permissions=8&scope=bot",
                          description=f"", color=0x090785)
    await ctx.send(embed=embed)


# -davet bitiÅŸ
# KUR-
@bot.command(name="kur")
async def kur(ctx, *args):
    if "tÃ¼mÃ¼" in args:
        embed = discord.Embed(title="KURLAR",
                              url="",
                              description=f"{kurcm.kur_dl + kurcm.kur_eu + kurcm.kur_str}", color=0x0acc14)
        await ctx.send(embed=embed)
    elif "dolar" in args:
        embed = discord.Embed(title="DOLAR",
                              url="",
                              description=f"{kurcm.kur_dl}", color=0x0acc14)
        await ctx.send(embed=embed)
    elif "euro" in args:
        embed = discord.Embed(title="Euro",
                              url="",
                              description=f"{kurcm.kur_eu}", color=0x0acc14)
        await ctx.send(embed=embed)
    elif "i-sterlin" in args:
        embed = discord.Embed(title="Ä°NGÄ°LÄ°Z STERLÄ°NÄ°",
                              url="",
                              description=f"{kurcm.kur_str}", color=0x0acc14)
        await ctx.send(embed=embed)
    else:
        await ctx.send(
            "!kur yazdiktan sonra \n istediÄŸiniz kuru girin\n!kur tÃ¼mÃ¼\n!kur euro\n!kur dolar\n!kur i-sterlin")


# -oyun-
@bot.command(name="oyun")
async def oyun(ctx, *args):
    if "zar" in args:
        await ctx.send("ZAR")
        await ctx.send(game.roll_dice())
    else:
        await ctx.send("YANLIÅž KOMUT!!")


# -mesaj sil-
@bot.command(name="sil")
@commands.has_role("Admin")
async def sil(ctx, amount=50):
    await ctx.channel.purge(limit=amount)


@bot.command(name="clear")
@commands.has_role("Admin")
async def clear(ctx, amount=50):
    await ctx.channel.purge(limit=amount)


# KULLANCI ATMA
@bot.command(name="at")
@commands.has_role("Admin")
async def at(ctx, member: discord.Member, *args, reason="YOK"):
    await member.kick(reason=reason)


@bot.command(name="kick")
@commands.has_role("Admin")
async def kick(ctx, member: discord.Member, *args, reason="YOK"):
    await member.kick(reason=reason)


# -ban
@bot.command(name="ban")
@commands.has_role("Admin")
async def ban(ctx, member: discord.Member, *args, reason="YOK"):
    await member.ban(reason=reason)


# -unban-
@bot.command(name="unban")
@commands.has_role("Admin")
async def unban(ctx, *, member):
    banned_users = await ctx.guild.bans()
    member_name, member_discriminator = member.split('#')

    for bans in banned_users:
        user = bans.user

        if (user.name, user.discriminator) == (member_name, member_discriminator):
            await ctx.guild.unban(user)
            await ctx.send(f'{user.mention} KULLANICISININ  BANI KALKTI')
            return


# -ping-
@bot.command()
async def ping(ctx):
    await ctx.send(f'Pingim : `{bot.latency * 1000}`ms')

LOG_FILE4 = ("log" ,"user_logs.txt")

# Otomatik ROL VERME VE HOÅžGELDÄ°N MESAJI ve log
@bot.event
async def on_member_join(member):
    kayÄ±t_role = member.guild.get_role(1208406371142344734)
    await member.add_roles(kayÄ±t_role)
    await member.guild.get_channel(1208420167025954908).send(
        f"{member.mention} HOÅž GELDÄ°N. {kayÄ±t_role.mention} RolÃ¼nÃ¼z verildi")

# -GÃœLE GÃœLE MESAJI
@bot.event
async def on_member_remove(member):
    channel = bot.get_channel(1208420167025954908)
    emb = discord.Embed(title=f"GÃœLE GÃœLE {member.name}")
    await channel.send(embed=emb)


# KAYIT BÄ°LGÄ°
@bot.command()
async def destek(ctx):
    await ctx.send("AKD BOT RESMÄ° DÄ°SCORD SUNUCUSU\n\nhttps://discord.gg/m9SwQvQ8xh")


# ROL VERME

@bot.command(pass_context=True)
@commands.has_role("Admin")
async def rolver(ctx, user: discord.Member, role: discord.Role):
    await user.add_roles(role)
    await ctx.send(f"{ctx.author.name} tarifindan {user.name} ÅŸu rol verildi:: {role.name}")

# adam asmaca

# Adam asmaca iÃ§in kelime listesi
kelimeler = ["python", "programlama", "discord", "yapayzeka", "makineogrenmesi", "telefon", "bilgisayar", "google",
             "internet", "oyun"]


# Adam asmaca oyununu baÅŸlatan fonksiyon
async def adam_asmaca(ctx):
    kelime = random.choice(kelimeler).lower()  # Rastgele bir kelime seÃ§
    tahmin_edilenler = []  # Tahmin edilen harflerin listesi
    can = 6  # KullanÄ±cÄ±nÄ±n tahmin hakkÄ± sayÄ±sÄ±

    # Oyunun baÅŸlangÄ±Ã§ mesajÄ±
    await ctx.send("Adam asmaca oyununa hoÅŸ geldiniz! Kelimeyi tahmin etmek iÃ§in harfleri yazÄ±n.")

    # Kelimeyi oluÅŸturmak iÃ§in "_" ile doldurulmuÅŸ hali
    kelime_gorunumu = "_ " * len(kelime)

    # Oyun dÃ¶ngÃ¼sÃ¼
    while can > 0:
        # Kelimenin gÃ¶rÃ¼nÃ¼mÃ¼nÃ¼ ve kalan canÄ± gÃ¶ster
        await ctx.send(f"Kelime: {kelime_gorunumu}\nKalan can: {can}")

        # KullanÄ±cÄ±nÄ±n bir harf girmesini bekleyin
        try:
            tahmin = await bot.wait_for("message", timeout=30.0,
                                        check=lambda m: m.author == ctx.author and m.content.isalpha())
            harf = tahmin.content.lower()
        except TimeoutError:
            await ctx.send("Zaman doldu! Oyun sona erdi.")
            return

        # Tahmin edilen harfi kontrol et
        if harf in tahmin_edilenler:
            await ctx.send("Bu harfi zaten tahmin ettiniz!")
            continue
        elif harf in kelime:
            tahmin_edilenler.append(harf)
            kelime_gorunumu = " ".join([h if h in tahmin_edilenler else "_" for h in kelime])
            if "_ " not in kelime_gorunumu:
                await ctx.send(f"Tebrikler! Kelimeyi doÄŸru tahmin ettiniz. Kelime: {kelime}")
                return
        else:
            can -= 1
            await ctx.send(f"Bu harf kelime iÃ§inde deÄŸil. Kalan can: {can}")

    await ctx.send(f"ÃœzgÃ¼nÃ¼m, can hakkÄ±nÄ±z bitti. DoÄŸru kelime: {kelime}")


@bot.command(name="adamasmaca")
async def komut_adam_asmaca(ctx):
    await adam_asmaca(ctx)


# adam asmaca bitiÅŸ
# taÅŸ kaÄŸÄ±t makas

@bot.command(name="tkm")
async def tkm(ctx, secim: str):
    await ctx.send("LÃ¼tfen  bir seÃ§im yapÄ±n: taÅŸ, kaÄŸÄ±t veya makas.")
    secimler = ["taÅŸ", "kaÄŸÄ±t", "makas"]
    bot_secimi = random.choice(secimler)

    if secim not in secimler:
        await ctx.send("LÃ¼tfen geÃ§erli bir seÃ§im yapÄ±n: taÅŸ, kaÄŸÄ±t veya makas.")
        return

    if secim == bot_secimi:
        await ctx.send(f"Ben de {bot_secimi}. Berabere!")
    elif (secim == "taÅŸ" and bot_secimi == "makas") or \
            (secim == "kaÄŸÄ±t" and bot_secimi == "taÅŸ") or \
            (secim == "makas" and bot_secimi == "kaÄŸÄ±t"):
        await ctx.send(f"Ben {bot_secimi}. KazandÄ±n!")
    else:
        await ctx.send(f"Ben {bot_secimi}. Kaybettin!")


# taÅŸ kaÄŸÄ±t makas bitiÅŸ

#        kullanÄ±cÄ± kayÄ±t 

# VeritabanÄ± baÄŸlantÄ±sÄ± oluÅŸturma
klasor_yolu = "db"

veritabani_yolu = os.path.join(klasor_yolu, "kullanici_bilgileri.db")

conn = sqlite3.connect(veritabani_yolu)

cursor = conn.cursor()

# KullanÄ±cÄ± tablosunu oluÅŸturma
cursor.execute('''CREATE TABLE IF NOT EXISTS kullanicilar (
                kullanici_id INTEGER PRIMARY KEY,
                ad TEXT,
                soyad TEXT,
                yas INTEGER
                )''')
conn.commit()


# 'kayit' komutu
@bot.command()
async def kayit(ctx, ad: str, soyad: str, yas: int):
    kullanici_id = ctx.author.id
    cursor.execute("INSERT INTO kullanicilar (kullanici_id, ad, soyad, yas) VALUES (?, ?, ?, ?)",
                   (kullanici_id, ad, soyad, yas))
    conn.commit()
    await ctx.send("BaÅŸarÄ±yla kaydedildi!")


# 'k_bilgi' komutu
@bot.command()
@commands.has_role("Admin")
async def k_bilgi(ctx, hedef_kullanici: discord.Member):
    kullanici_id = hedef_kullanici.id
    cursor.execute("SELECT ad, soyad, yas FROM kullanicilar WHERE kullanici_id = ?", (kullanici_id,))
    veri = cursor.fetchone()
    if veri is not None:
        ad, soyad, yas = veri
        await ctx.send(f"{hedef_kullanici.name}'in Bilgileri:\nAdÄ±: {ad}\nSoyadÄ±: {soyad}\nYaÅŸÄ±: {yas}")
    else:
        await ctx.send("KullanÄ±cÄ± bilgisi bulunamadÄ±.")


#      kullanÄ±cÄ± kayÄ±t bitiÅŸ

# log komutu baÅŸlangÄ±Ã§

LOG_FILE0 = os.path.join('log', 'komut_logu.txt')


@bot.event
async def on_message(message):
    # KullanÄ±cÄ±nÄ±n adÄ±nÄ± ve kullanÄ±lan komutu al
    log_message = f"{message.author.name} kullanicisi: {message.content} komutunu kullandi\n"

    # Log dosyasÄ±na yaz
    with open(LOG_FILE0, 'a', encoding="utf-8") as file:
        file.write(log_message)
    # KomutlarÄ± iÅŸle
    await bot.process_commands(message)

#fdgdfg

# Log dosyasÄ±nÄ±n adÄ±
LOG_FILE5 = os.path.join('log', 'message_logs.txt')

# KullanÄ±cÄ± mesajlarÄ±nÄ± loglama
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    
    

    now = datetime.now()
    current_time = now.strftime("%d/%m/%Y %H:%M:%S")
    with open(LOG_FILE5, "a", encoding="utf-8") as log_file:
        log_file.write(f"{message.author.name}: {message.content} ,{current_time}\n")
    await bot.process_commands(message)

#seviye sistemi

conn = sqlite3.connect('db/seviye.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS levels (
             user_id INTEGER PRIMARY KEY,
             level INTEGER
             )''')
conn.commit()

# level sistemi

@bot.command()
async def seviye(ctx, user: discord.Member):
    c.execute("SELECT level FROM levels WHERE user_id = ?", (user.id,))
    row = c.fetchone()
    if row:
        await ctx.send(f"{user.name} adlÄ± kullanÄ±cÄ±nÄ±n seviyesi: {row[0]}")
    else:
        await ctx.send("Belirtilen kullanÄ±cÄ±nÄ±n seviyesi: 0'")

message_count = {}

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    author_id = message.author.id
    if author_id not in message_count:
        message_count[author_id] = 10
    else:
        message_count[author_id] = message_count[author_id] + 1

    if message_count[author_id] % 20 == 0:
        c.execute("SELECT level FROM levels WHERE user_id = ?", (author_id,))
        row = c.fetchone()
        if row is None:
            c.execute("INSERT INTO levels (user_id, level) VALUES (?, ?)", (author_id, 1))
        else:
            c.execute("UPDATE levels SET level = level + 1 WHERE user_id = ?", (author_id,))
        conn.commit()

    await bot.process_commands(message)

# seviye verme

@bot.command()
@commands.has_role("Admin")  # Sadece "ADMÄ°N" adÄ±nda bir rolÃ¼ olanlar bu komutu kullanabilirs
async def seviye_ver(ctx, user: discord.Member, level: int):
    c.execute("SELECT * FROM levels WHERE user_id = ?", (user.id,))
    row = c.fetchone()
    if row:
        c.execute("UPDATE levels SET level = ? WHERE user_id = ?", (level, user.id))
    else:
        c.execute("INSERT INTO levels (user_id, level) VALUES (?, ?)", (user.id, level))
    
    conn.commit()
    
    await ctx.send(f"{user.name} adlÄ± kullanÄ±cÄ±ya seviye {level} verildi.")

# resim kaydetme


img_folder = "img"

@bot.command()
async def resim(ctx):
    def check(message):
        return message.author == ctx.author and message.channel == ctx.channel

    await ctx.send("LÃ¼tfen bir resim gÃ¶nderin.")
    message = await bot.wait_for('message', check=check)
    if len(message.attachments) > 0:
        attachment = message.attachments[0]
        await attachment.save(f"{img_folder}/{attachment.filename}")
        await ctx.send("Resim baÅŸarÄ±yla kaydedildi.")
    else:
        await ctx.send("LÃ¼tfen bir resim gÃ¶nderin.")

@bot.command()
async def resim_bul(ctx, resim_ismi: str):
    if os.path.exists(f"{img_folder}/{resim_ismi}"):
        with open(f"{img_folder}/{resim_ismi}", 'rb') as file:
            picture = discord.File(file)
            await ctx.send(file=picture)
    else:
        await ctx.send("Belirtilen isimde bir resim bulunamadÄ±.")


@bot.command()
async def resimler(ctx):
    resimler = os.listdir(img_folder)
    resim_listesi = "\n".join(resimler)
    await ctx.send(f"KayÄ±tlÄ± resimler:\n{resim_listesi}")


if not os.path.exists(img_folder):
    os.makedirs(img_folder)

#vidio kayÄ±t

video_folder = "vid"

@bot.command()
async def vidio(ctx):
    def check(message):
        return message.author == ctx.author and message.channel == ctx.channel

    await ctx.send("LÃ¼tfen bir video gÃ¶nderin.")
    message = await bot.wait_for('message', check=check)
    if len(message.attachments) > 0:
        attachment = message.attachments[0]
        await attachment.save(f"{video_folder}/{attachment.filename}")
        await ctx.send("Video baÅŸarÄ±yla kaydedildi.")
    else:
        await ctx.send("LÃ¼tfen bir video gÃ¶nderin.")

@bot.command()
async def vidio_bul(ctx, video_ismi: str):
    if os.path.exists(f"{video_folder}/{video_ismi}"):
        await ctx.send(file=discord.File(f"{video_folder}/{video_ismi}"))
    else:
        await ctx.send("Belirtilen isimde bir video bulunamadÄ±.")

@bot.command()
async def vidiolar(ctx):
    videolar = os.listdir(video_folder)
    video_listesi = "\n".join(videolar)
    await ctx.send(f"KayÄ±tlÄ± videolar:\n{video_listesi}")

if not os.path.exists(video_folder):
    os.makedirs(video_folder)

try:
    bot.run(my_token)
except TypeError:
    print("Tokeni Kontrol Et")